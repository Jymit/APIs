package main

import (
        "encoding/json"
        "fmt"
        "log"
        "net/http"
        "strconv"

        "github.com/gorilla/mux"
)

type Item struct {
        ID   int    `json:"id"`
        Name string `json:"name"`
        Data string `json:"data"`
}

var items []Item
//CRUD Create Read Update Delete
func main() {
        router := mux.NewRouter() //https://github.com/gorilla/mux

        items = append(items, Item{ID: 1, Name: "Item 1", Data: "Data 1"})
        items = append(items, Item{ID: 2, Name: "Item 2", Data: "Data 2"})

        router.HandleFunc("/items", createItem).Methods("POST")
        router.HandleFunc("/items", getItems).Methods("GET")
        router.HandleFunc("/items/{id}", updateItem).Methods("PUT")
        router.HandleFunc("/items/{id}", deleteItem).Methods("DELETE")

        fmt.Println("Server listening on port 8000")
        log.Fatal(http.ListenAndServe(":8000", router))
}

func createItem(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json")
        var newItem Item
        _ = json.NewDecoder(r.Body).Decode(&newItem)

        newItem.ID = len(items) + 1
        items = append(items, newItem)
        json.NewEncoder(w).Encode(newItem)
}

func getItems(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(items)
}

func updateItem(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json")
        params := mux.Vars(r)
        id, err := strconv.Atoi(params["id"])
        if err != nil {
                http.Error(w, "Invalid item ID", http.StatusBadRequest)
                return
        }

        var updatedItem Item
        _ = json.NewDecoder(r.Body).Decode(&updatedItem)

        for index, item := range items {
                if item.ID == id {
                        updatedItem.ID = id
                        items[index] = updatedItem
                        json.NewEncoder(w).Encode(updatedItem)
                        return
                }
        }

        http.Error(w, "Item not found", http.StatusNotFound)
}

func deleteItem(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json")
        params := mux.Vars(r)
        id, err := strconv.Atoi(params["id"])
        if err != nil {
                http.Error(w, "Invalid item ID", http.StatusBadRequest)
                return
        }

        for index, item := range items {
                if item.ID == id {
                        items = append(items[:index], items[index+1:]...)
                        w.WriteHeader(http.StatusNoContent)
                        return
                }
        }

        http.Error(w, "Item not found", http.StatusNotFound)
}
